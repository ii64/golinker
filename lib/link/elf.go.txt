package link

import (
	"bytes"
	"debug/elf"
	"encoding/binary"
	"fmt"
	"strings"

	"github.com/ii64/golinker/lib/disasm"
	"golang.org/x/arch/arm64/arm64asm"
	"golang.org/x/arch/x86/x86asm"
)

type LinkStateElf struct {
	symtab map[uint64]SymTab

	syms       []elf.Symbol
	symOnSect  map[*elf.Section][]elf.Symbol
	dataOnSect map[*elf.Section][][]byte
	symUnk     map[elf.SectionIndex][]elf.Symbol
	Rels       []elf.Section

	ProgData []byte
}

func disasmElf(m elf.Machine, code []byte) (err error) {
	switch m {
	case elf.EM_386:
		_ = disasm.Arch386
		return
	case elf.EM_X86_64:
		_ = disasm.ArchAMD64
		return
	case elf.EM_ARM:
		_ = disasm.ArchARM
		return
	case elf.EM_AARCH64:
		_ = disasm.ArchARM64
		return
	}
	err = fmt.Errorf("machine unsupported: %s", m)
	return
}

func linkElf(e *elf.File) (state *LinkStateElf, err error) {
	state = &LinkStateElf{}
	state.symtab = map[uint64]SymTab{}
	ehdr := e.FileHeader
	if ehdr.Type != elf.ET_REL {
		err = fmt.Errorf("todo: only ET_REL supported atm.")
		return
	}

	state.syms, err = e.Symbols()
	if err != nil {
		return
	}

	for _, sect := range e.Sections {
		if sect.Type != elf.SHT_PROGBITS {
			continue
		}
		var dat []byte
		dat, err = sect.Data()
		if err != nil {
			return
		}
		state.ProgData = append(state.ProgData, dat...)
	}

	// get rel sections
	for _, r := range e.Sections {
		if r.Type != elf.SHT_RELA && r.Type != elf.SHT_REL {
			continue
		}
		err = applyElfRelication(e, state, r)
		if err != nil {
			return
		}
	}

	state.symOnSect = map[*elf.Section][]elf.Symbol{}
	state.symUnk = map[elf.SectionIndex][]elf.Symbol{}

	for i, _ := range state.syms {
		sym := state.syms[i]
		switch sym.Section {
		case elf.SHN_ABS, elf.SHN_UNDEF:
			state.symUnk[sym.Section] = append(state.symUnk[sym.Section], sym)
		default:
			sect := e.Sections[sym.Section]
			state.symOnSect[sect] = append(state.symOnSect[sect], sym)
		}
	}

	state.dataOnSect = map[*elf.Section][][]byte{}

	// read data out from secton buffer
	var nb int
	for sect, syms := range state.symOnSect {
		if sect.Size < 1 {
			continue
		}
		for _, sym := range syms {
			tmp := make([]byte, sym.Size)
			nb, err = sect.ReadAt(tmp, int64(sym.Value))
			if err != nil {
				panic(err) // stack trace.
			}
			_ = nb // leave out remaining bytes.
			state.dataOnSect[sect] = append(state.dataOnSect[sect], tmp)
		}
	}

	var (
		pc uint64 = 0
	)
	sectText := e.Section(".text")
	for i, code := range state.dataOnSect[sectText] {
		if len(code) < 1 {
			continue
		}
		sym := state.symOnSect[sectText][i]
		patchWithRelocation(e, state, pc, sym, code)
		disasmElfCodeBlock(e, state, pc, code)
		pc = align8(pc + uint64(len(code)))
	}

	fmt.Println(state.dataOnSect)
	return
}

func align8(addr uint64) uint64 {
	return (((addr - 1) >> 3) + 1) << 3
}

func elfTypeIdent(e *elf.File, state *LinkStateElf) string {
	switch {
	case e.Class == elf.ELFCLASS64 && e.Machine == elf.EM_X86_64:
		return "amd64"
	case e.Class == elf.ELFCLASS64 && e.Machine == elf.EM_AARCH64:
		return "arm64"
	}
	panic(fmt.Sprintf("unsupported rel process: %s %s", e.Class, e.Machine))
}

func patchWithRelocation(e *elf.File, state *LinkStateElf, pc uint64, sym elf.Symbol, code []byte) {
	// applying patches to code

}

func disasmElfCodeBlock(e *elf.File, state *LinkStateElf, pc uint64, code []byte) (size int, err error) {
	symNameLookup := func(addr uint64) (name string, base uint64) {
		// symbol override.
		entry, exist := state.symtab[addr]
		if exist {
			return entry.Name, entry.Base
		}

		// known symbol
		var numUndSymbol uint64 = 1
		if addr2 := addr - 1 - numUndSymbol; addr2 > 0 && addr2 < uint64(len(state.syms)) {
			sym := state.syms[addr2]
			return sym.Name, addr
		}
		return "", 0
	}
	textReaderAt := bytes.NewReader(code)
	switch elfTypeIdent(e, state) {
	case "amd64":
		var instrs []x86asm.Inst
		instrs, err = disasm.ArchAMD64.DecodeBlock(code)
		if err != nil {
			return
		}
		fs := disasm.ArchAMD64.GoSyntaxBlock(instrs, pc, symNameLookup, textReaderAt)
		fmt.Printf("amd64: pc %x (%d)\n----\n\t%s\n-----\n", pc, pc, strings.Join(fs, "\n\t"))
	case "arm64":
		var instrs []arm64asm.Inst
		instrs, err = disasm.ArchARM64.DecodeBlock(code)
		if err != nil {
			return
		}
		fs := disasm.ArchARM64.GoSyntaxBlock(instrs, pc, symNameLookup, textReaderAt)
		fmt.Printf("arm64: pc %x (%d)\n----\n\t%s\n-----\n", pc, pc, strings.Join(fs, "\n\t"))
	}
	return
}

func applyElfRelication(e *elf.File, state *LinkStateElf, s *elf.Section) (err error) {
	switch elfTypeIdent(e, state) {
	case "amd64":
		return applyElfRelocationAMD64(e, state, s)
	case "arm64":
		return applyElfRelocationARM64(e, state, s)
	}
	panic(fmt.Sprintf("unsupported rel process: %s %s", e.Class, e.Machine))
}

func applyElfRelocationAMD64(e *elf.File, state *LinkStateElf, s *elf.Section) (err error) {
	var dat []byte
	dat, err = s.Data()
	if err != nil {
		return
	}
	if len(dat)%24 != 0 {
		return fmt.Errorf("length of relication section is not a multiple of 24")
	}
	b := bytes.NewReader(dat)
	var rela elf.Rela64
	for b.Len() > 0 {
		binary.Read(b, e.ByteOrder, &rela)
		symNo := rela.Info >> 32
		t := elf.R_X86_64(rela.Info & 0xffff)
		if symNo == 0 || symNo > uint64(len(state.syms)) {
			continue
		}
		sym := state.syms[symNo-1]
		/*
			amd64: R_X86_64_PLT32 elf.Rela64{Off:0x15, Info:0xf00000004, Addend:-4}  sym: elf.Symbol{Name:"subr", Info:0x12, Other:0x0, Section:elf.SHN_UNDEF+1, Value:0x0, Size:0xb, Version:"", Library:""}
			amd64: R_X86_64_PLT32 elf.Rela64{Off:0x40, Info:0x1300000004, Addend:-4}  sym: elf.Symbol{Name:"memset", Info:0x10, Other:0x0, Section:elf.SHN_UNDEF, Value:0x0, Size:0x0, Version:"", Library:""}
			amd64: R_X86_64_PC32 elf.Rela64{Off:0x53, Info:0x900000002, Addend:-4}  sym: elf.Symbol{Name:".L.str", Info:0x1, Other:0x0, Section:elf.SHN_UNDEF+4, Value:0x0, Size:0xa, Version:"", Library:""}
			amd64: R_X86_64_PLT32 elf.Rela64{Off:0x58, Info:0x1000000004, Addend:-4}  sym: elf.Symbol{Name:"puts", Info:0x10, Other:0x0, Section:elf.SHN_UNDEF, Value:0x0, Size:0x0, Version:"", Library:""}
			amd64: R_X86_64_PC32 elf.Rela64{Off:0x5f, Info:0xa00000002, Addend:-4}  sym: elf.Symbol{Name:".L.str.1", Info:0x1, Other:0x0, Section:elf.SHN_UNDEF+4, Value:0xa, Size:0x10, Version:"", Library:""}
			amd64: R_X86_64_PC32 elf.Rela64{Off:0x66, Info:0xb00000002, Addend:-4}  sym: elf.Symbol{Name:".L.str.2", Info:0x1, Other:0x0, Section:elf.SHN_UNDEF+4, Value:0x1a, Size:0x6, Version:"", Library:""}
			amd64: R_X86_64_PLT32 elf.Rela64{Off:0x6d, Info:0xe00000004, Addend:-4}  sym: elf.Symbol{Name:"printf", Info:0x10, Other:0x0, Section:elf.SHN_UNDEF, Value:0x0, Size:0x0, Version:"", Library:""}
			amd64: R_X86_64_PC32 elf.Rela64{Off:0x74, Info:0xc00000002, Addend:-4}  sym: elf.Symbol{Name:".L.str.3", Info:0x1, Other:0x0, Section:elf.SHN_UNDEF+4, Value:0x20, Size:0xd, Version:"", Library:""}
			amd64: R_X86_64_PLT32 elf.Rela64{Off:0x82, Info:0xe00000004, Addend:-4}  sym: elf.Symbol{Name:"printf", Info:0x10, Other:0x0, Section:elf.SHN_UNDEF, Value:0x0, Size:0x0, Version:"", Library:""}
			amd64: R_X86_64_PC32 elf.Rela64{Off:0x99, Info:0xd00000002, Addend:-4}  sym: elf.Symbol{Name:"subr3.data", Info:0x1, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x18, Version:"", Library:""}
		*/
		switch t {
		case elf.R_X86_64_PLT32:
		case elf.R_X86_64_PC32:
		}
		fmt.Printf("amd64: %v %+#v  sym: %+#v\n", t, rela, sym)
	}
	return
}

func applyElfRelocationARM64(e *elf.File, state *LinkStateElf, s *elf.Section) (err error) {
	var dat []byte
	dat, err = s.Data()
	if err != nil {
		return
	}
	b := bytes.NewReader(dat)
	var rela elf.Rela64
	for b.Len() > 0 {
		binary.Read(b, e.ByteOrder, &rela)
		symNo := rela.Info >> 32
		t := elf.R_AARCH64(rela.Info & 0xffff)
		if symNo == 0 || symNo > uint64(len(state.syms)) {
			continue
		}
		sym := state.syms[symNo-1]
		/*
			arm64: R_AARCH64_CALL26 elf.Rela64{Off:0x14, Info:0xf0000011b, Addend:0}  sym: elf.Symbol{Name:"subr", Info:0x12, Other:0x0, Section:elf.SHN_UNDEF+1, Value:0x0, Size:0xc, Version:"", Library:""}
			arm64: R_AARCH64_CALL26 elf.Rela64{Off:0x4c, Info:0x130000011b, Addend:0}  sym: elf.Symbol{Name:"memset", Info:0x10, Other:0x0, Section:elf.SHN_UNDEF, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADR_PREL_PG_HI21 elf.Rela64{Off:0x54, Info:0x200000113, Addend:24}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADD_ABS_LO12_NC elf.Rela64{Off:0x5c, Info:0x200000115, Addend:24}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_CALL26 elf.Rela64{Off:0x60, Info:0x100000011b, Addend:0}  sym: elf.Symbol{Name:"puts", Info:0x10, Other:0x0, Section:elf.SHN_UNDEF, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADR_PREL_PG_HI21 elf.Rela64{Off:0x64, Info:0x200000113, Addend:34}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADR_PREL_PG_HI21 elf.Rela64{Off:0x68, Info:0x200000113, Addend:50}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADD_ABS_LO12_NC elf.Rela64{Off:0x6c, Info:0x200000115, Addend:34}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADD_ABS_LO12_NC elf.Rela64{Off:0x70, Info:0x200000115, Addend:50}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_CALL26 elf.Rela64{Off:0x74, Info:0xe0000011b, Addend:0}  sym: elf.Symbol{Name:"printf", Info:0x10, Other:0x0, Section:elf.SHN_UNDEF, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADR_PREL_PG_HI21 elf.Rela64{Off:0x78, Info:0x200000113, Addend:56}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADD_ABS_LO12_NC elf.Rela64{Off:0x80, Info:0x200000115, Addend:56}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_CALL26 elf.Rela64{Off:0x84, Info:0xe0000011b, Addend:0}  sym: elf.Symbol{Name:"printf", Info:0x10, Other:0x0, Section:elf.SHN_UNDEF, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADR_PREL_PG_HI21 elf.Rela64{Off:0x98, Info:0x200000113, Addend:0}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
			arm64: R_AARCH64_ADD_ABS_LO12_NC elf.Rela64{Off:0xa8, Info:0x200000115, Addend:0}  sym: elf.Symbol{Name:"", Info:0x3, Other:0x0, Section:elf.SHN_UNDEF+3, Value:0x0, Size:0x0, Version:"", Library:""}
		*/

		switch t {
		case elf.R_AARCH64_CALL26:
		case elf.R_AARCH64_ADR_PREL_PG_HI21:
		}

		fmt.Printf("arm64: %v %+#v  sym: %+#v\n", t, rela, sym)
	}
	return
}

func elfCanApplyRelocation(s elf.Symbol) bool {
	return s.Section != elf.SHN_UNDEF && s.Section < elf.SHN_LORESERVE
}
